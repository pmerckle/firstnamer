"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O"
))
# Pour voir les prénoms qui ne sont pas encore bien encodés
grep("Ã", unique(df$firstname), value = TRUE)
# Clean encoding
df$firstname <- str_replace_all(df$firstname, c(
"Ã‚" = "A",
"Ã€" = "A",
"Ã„" = "A",
"Ã†" = "AE",
"Ã‡" = "C",
"Ãˆ" = "C",
"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O",
"Ãœ" = "OE"
))
# Pour voir les prénoms qui ne sont pas encore bien encodés
grep("Ã", unique(df$firstname), value = TRUE)
# Clean encoding
df$firstname <- str_replace_all(df$firstname, c(
"Ã‚" = "A",
"Ã€" = "A",
"Ã„" = "A",
"Ã†" = "AE",
"Ã‡" = "C",
"Ãˆ" = "C",
"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O",
"Ãœ" = "OE",
"Ã›" = "U"
))
# Pour voir les prénoms qui ne sont pas encore bien encodés
grep("Ã", unique(df$firstname), value = TRUE)
# Clean encoding
df$firstname <- str_replace_all(df$firstname, c(
"Ã‚" = "A",
"Ã€" = "A",
"Ã„" = "A",
"Ã†" = "AE",
"Ã‡" = "C",
"Ãˆ" = "C",
"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O",
"Ãœ" = "OE",
"Ã›" = "U",
"Ã™" = "U"
))
# Pour voir les prénoms qui ne sont pas encore bien encodés
grep("Ã", unique(df$firstname), value = TRUE)
# is.male
is.male <- function(fn) gender(fn) == "male"
# is.female
is.female <- function(fn) gender(fn) == "female"
is.male(c("Gilles", "Agnès", "Antoine", "Maëlys", "Marlène", "Lisa", "Pierre", "Christine", "Kevin", "Corentin"))
is.male(c("Gilles", "Agnès", "Antoine", "Maëlys", "Marlène", "Lisa", "Pierre", "Christine", "Kevin", "Corentin")) %>% freq
gender(c("Gilles", "Agnès", "Antoine", "Maëlys", "Marlène", "Lisa", "Pierre", "Christine", "Kevin", "Corentin")) %>% freq
fn = "Claude"
fn = "Claude"
temp <- df %>% filter(firstname == toupper(unaccent(fn))) %>%
group_by(firstname, sex) %>%
summarise(nb =sum(count)) %>%
mutate(pourcentage = nb / sum(nb) * 100) %>%
filter(pourcentage > 50)
temp
# gender.unique ----
gender.unique <- function(fn, freq = FALSE) {
temp <- df %>% filter(firstname == toupper(unaccent(fn))) %>%
group_by(firstname, sex) %>%
summarise(nb =sum(count)) %>%
mutate(pourcentage = nb / sum(nb) * 100) %>%
filter(pourcentage > 50)
if(freq) res <- ifelse(temp$sex == 1, "male", "female") else res <- ifelse(temp$sex == 1, temp$pourcentage/100, 1-temp$pourcentage/100)
return(res)
}
gender.unique("Claude")
freq
if(freq) res <- ifelse(temp$sex == 1, temp$pourcentage/100, 1-temp$pourcentage/100) else res <- ifelse(temp$sex == 1, "male", "female")
# gender.unique ----
gender.unique <- function(fn, freq = FALSE) {
temp <- df %>% filter(firstname == toupper(unaccent(fn))) %>%
group_by(firstname, sex) %>%
summarise(nb =sum(count)) %>%
mutate(pourcentage = nb / sum(nb) * 100) %>%
filter(pourcentage > 50)
if(freq) res <- ifelse(temp$sex == 1, temp$pourcentage/100, 1-temp$pourcentage/100) else res <- ifelse(temp$sex == 1, "male", "female")
return(res)
}
gender.unique("Claude")
gender.unique("Claude", freq = TRUE)
gender.unique("Annick", freq = TRUE)
# gender ----
gender <- function(fn, freq = FALSE) sapply(fn, gender.unique, freq = freq) %>% as.vector
gender("Annick", freq = TRUE)
gender("Annick", freq = FALSE)
gender(c("Annick", "Pierre"), freq = FALSE)
gender(c("Annick", "Pierre"), freq = TRUE)
library(firstnamer)
library(firstnamer)
library(firstnamer)
gender("Gilles", "Agnès")
# Packages
library(questionr)
library(dplyr)
library(stringr)
# Load and unzip data file
temp <- tempfile()
download.file("https://www.insee.fr/fr/statistiques/fichier/2540004/nat2017_txt.zip",temp)
data <- read.table(unz(temp, "nat2017.txt"), stringsAsFactors = FALSE)
unlink(temp)
# Clean data
df <- data
names(df) <- c("sex", "firstname", "year", "count")
# Remove bad data
df <- df[df$sex %in% c("1", "2"), ]
# Variable class
df$sex <- factor(df$sex)
df$year <- as.integer(df$year)
df$count <- as.integer(df$count)
# Clean encoding
df$firstname <- str_replace_all(df$firstname, c(
"Ã‚" = "A",
"Ã€" = "A",
"Ã„" = "A",
"Ã†" = "AE",
"Ã‡" = "C",
"Ãˆ" = "C",
"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O",
"Ãœ" = "OE",
"Ã›" = "U",
"Ã™" = "U"
))
## FUNCTIONS ----
# unaccent ----
unaccent <- function(text) {
text <- gsub("['`^~\"]", " ", text)
text <- iconv(text, to="ASCII//TRANSLIT//IGNORE")
text <- gsub("['`^~\"]", "", text)
return(text)
}
fn = "Claude"
freq = TRUE
# gender.unique ----
gender.unique <- function(fn, freq = FALSE) {
temp <- df %>% filter(firstname == toupper(unaccent(fn))) %>%
group_by(firstname, sex) %>%
summarise(nb =sum(count)) %>%
mutate(pourcentage = nb / sum(nb) * 100) %>%
filter(pourcentage > 50)
if(freq) res <- ifelse(temp$sex == 1, temp$pourcentage/100, 1-temp$pourcentage/100) else res <- ifelse(temp$sex == 1, "male", "female")
return(res)
}
# gender ----
gender <- function(fn, freq = FALSE) sapply(fn, gender.unique, freq = freq) %>% as.vector
# is.male ----
is.male <- function(fn) gender(fn) == "male"
# is.female ----
is.female <- function(fn) gender(fn) == "female"
# To do :
# Add probs or freq logical parameter to is.male and is.female to return probability instead of logical
is.male("Paquerette")
is.male("Paquerette")
is.female("Cerise")
gender("Cerise", freq = TRUE)
gender("Fernando", freq = TRUE)
gender("Andrea", freq = TRUE)
gender("Andrea")
gender("Andrea", freq = TRUE)
gender("Andrea", freq = TRUE)
gender("Camille", freq = TRUE)
gender("June", freq = TRUE)
fn = "June"
gender("Pierre", freq = TRUE)
gender.unique <- function(fn, freq = FALSE) {
temp <- df %>% filter(firstname == toupper(unaccent(fn))) %>%
fn = "June"
df %>% filter(firstname == toupper(unaccent(fn))) %>%
group_by(firstname, sex) %>%
summarise(nb =sum(count)) %>%
mutate(pourcentage = nb / sum(nb) * 100)
df %>% filter(firstname == toupper(unaccent(fn))) %>%
group_by(firstname, sex, year) %>%
summarise(nb =sum(count)) %>%
mutate(pourcentage = nb / sum(nb) * 100)
# Packages
library(questionr)
library(dplyr)
library(stringr)
# Load and unzip data file
temp <- tempfile()
download.file("https://www.insee.fr/fr/statistiques/fichier/2540004/nat2017_txt.zip",temp)
data <- read.table(unz(temp, "nat2017.txt"), stringsAsFactors = FALSE)
unlink(temp)
# Clean data
df <- data
names(df) <- c("sex", "firstname", "year", "count")
# Remove bad data
df <- df[df$sex %in% c("1", "2"), ]
# Variable class
df$sex <- factor(df$sex)
df$year <- as.integer(df$year)
df$count <- as.integer(df$count)
# Clean encoding
df$firstname <- str_replace_all(df$firstname, c(
"Ã‚" = "A",
"Ã€" = "A",
"Ã„" = "A",
"Ã†" = "AE",
"Ã‡" = "C",
"Ãˆ" = "C",
"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O",
"Ãœ" = "OE",
"Ã›" = "U",
"Ã™" = "U"
))
# unaccent ----
unaccent <- function(text) {
text <- gsub("['`^~\"]", " ", text)
text <- iconv(text, to="ASCII//TRANSLIT//IGNORE")
text <- gsub("['`^~\"]", "", text)
return(text)
}
fn = "Pierre"
df %>% filter(firstname == toupper(unaccent(fn))) %>%
group_by(firstname, sex, year) %>%
summarise(nb =sum(count)) %>%
mutate(pourcentage = nb / sum(nb) * 100)
devtools::create("firstnamer")
library(stringr)
devtools::document()
library(dplyr)
# Documentation
devtool::document()
# Documentation
devtools::document()
# Libraries
library(stringr)
library(dplyr)
# Documentation
devtools::document()
library(firstnamer)
# Documentation
devtools::document()
# Documentation
?firstnamer
?unaccent
# Documentation
?questionr
# Documentation
??questionr
# Documentation
?unaccent
# Functions
unaccent("Jérémie")
gender("Henry")
is.female("Marcelle")
library(gender)
#install.packages("gender")
library(gender)
install.packages("gender")
# install.packages("gender")
library(gender)
library(firstnamer)
?gender_unique
# Documentation
package?firstnamer
library(firstnamer)
# Vignettes
browseVignettes()
# Creat new vignette
devtools::use_vignette("firstnamer")
gender("Louisette")
gender("Charles-Henri")
gender(c("Anouk", "Pierre", "Sacha"))
gender("Sacha", freq = TRUE)
View(data)
View(data)
View(data)
gender("Caca")
gender("Anouk", freq = TRUE)
gender("Pierre", freq = TRUE)
gender("Camille", freq = TRUE)
gender("Morgane", freq = TRUE)
gender("Pierre", freq = TRUE)
gender("Morgane")
2+2
M <- 2
M + 2
M * 10
anouk <- 27
anouk
anouk * 2
anouk / M
M <- 2
anouk <- 27
M * anouk
M <- 2
anouk <- 30
M * anouk
prenom <- "Pierre"
nom <- "Mercklé"
paste(prenom, nom)
paste(nom, prenom)
prenom <- c("Pierre", "Anouk", "Lilia", "Noé")
nom <- "Mercklé"
paste(prenom, nom)
paste(nom, prenom)
You are a big shit
sqrt(1:1000)
a <- sqrt(1:1000)
sqrt(a)
library(firstnamer)
# Load and unzip data file
temp <- tempfile()
download.file("https://www.insee.fr/fr/statistiques/fichier/2540004/nat2017_txt.zip",temp)
data <- read.table(unz(temp, "nat2017.txt"), stringsAsFactors = FALSE)
unlink(temp)
# Clean data
df <- data
names(df) <- c("sex", "firstname", "year", "count")
# Remove bad data
df <- df[df$sex %in% c("1", "2"), ]
# Variable class
df$sex <- factor(df$sex)
df$year <- as.integer(df$year)
df$count <- as.integer(df$count)
# Clean encoding
df$firstname <- str_replace_all(df$firstname, c(
"Ã‚" = "A",
"Ã€" = "A",
"Ã„" = "A",
"Ã†" = "AE",
"Ã‡" = "C",
"Ãˆ" = "C",
"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O",
"Ãœ" = "OE",
"Ã›" = "U",
"Ã™" = "U"
))
# Load other packages
library(dplyr)
library(stringr)
# Load and unzip data file
temp <- tempfile()
download.file("https://www.insee.fr/fr/statistiques/fichier/2540004/nat2017_txt.zip",temp)
data <- read.table(unz(temp, "nat2017.txt"), stringsAsFactors = FALSE)
unlink(temp)
# Clean data
df <- data
names(df) <- c("sex", "firstname", "year", "count")
# Remove bad data
df <- df[df$sex %in% c("1", "2"), ]
# Variable class
df$sex <- factor(df$sex)
df$year <- as.integer(df$year)
df$count <- as.integer(df$count)
# Clean encoding
df$firstname <- str_replace_all(df$firstname, c(
"Ã‚" = "A",
"Ã€" = "A",
"Ã„" = "A",
"Ã†" = "AE",
"Ã‡" = "C",
"Ãˆ" = "C",
"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O",
"Ãœ" = "OE",
"Ã›" = "U",
"Ã™" = "U"
))
View(df)
# Save data
save(df, file = "df.RData")
# Save data
save(df, file = "data/df.RData")
# Save data
devtools::use_data(df, firstnames)
# Save data
devtools::use_data(df)
# Recode source data
devtools::use_data_raw()
# Save data
devtools::use_data(df, internal = TRUE)
# Save data
devtools::use_data(df)
library(firstnamer)
gender("Annick")
library(firstnamer)
gender("Marilou")
library(firstnamer)
library(firstnamer)
library(firstnamer)
gender("Annick")
library(magrittr)
gender("Henry")
library(firstnamer)
# Load and unzip data file
temp <- tempfile()
download.file("https://www.insee.fr/fr/statistiques/fichier/2540004/nat2017_txt.zip",temp)
data <- read.table(unz(temp, "nat2017.txt"), stringsAsFactors = FALSE)
unlink(temp)
# Clean data
df <- data
names(df) <- c("sex", "firstname", "year", "count")
# Remove bad data
df <- df[df$sex %in% c("1", "2"), ]
# Variable class
df$sex <- factor(df$sex)
df$year <- as.integer(df$year)
df$count <- as.integer(df$count)
# Clean encoding
df$firstname <- str_replace_all(df$firstname, c(
"Ã‚" = "A",
"Ã€" = "A",
"Ã„" = "A",
"Ã†" = "AE",
"Ã‡" = "C",
"Ãˆ" = "C",
"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O",
"Ãœ" = "OE",
"Ã›" = "U",
"Ã™" = "U"
))
# Libraries ----
library(dplyr)
library(magrittr)
library(stringr)
# Data ----
# Load and unzip data file
temp <- tempfile()
download.file("https://www.insee.fr/fr/statistiques/fichier/2540004/nat2017_txt.zip",temp)
data <- read.table(unz(temp, "nat2017.txt"), stringsAsFactors = FALSE)
unlink(temp)
# Clean data
df <- data
names(df) <- c("sex", "firstname", "year", "count")
# Remove bad data
df <- df[df$sex %in% c("1", "2"), ]
# Variable class
df$sex <- factor(df$sex)
df$year <- as.integer(df$year)
df$count <- as.integer(df$count)
# Clean encoding
df$firstname <- str_replace_all(df$firstname, c(
"Ã‚" = "A",
"Ã€" = "A",
"Ã„" = "A",
"Ã†" = "AE",
"Ã‡" = "C",
"Ãˆ" = "C",
"Ã‹" = "E",
"ÃŠ" = "E",
"Ã‰" = "E",
"ÃŽ" = "I",
"Ã\u008f" = "I",
"Ã”" = "O",
"Ã–" = "O",
"Ãœ" = "OE",
"Ã›" = "U",
"Ã™" = "U"
))
library(firstnamer)
gender("Annick")
